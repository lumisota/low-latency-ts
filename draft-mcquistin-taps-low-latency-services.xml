<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="3"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<rfc category="info" docName="draft-mcquistin-taps-low-latency-services-00" ipr="trust200902">
    <front>
        <title abbrev="Low Latency Transport Services">
            Transport Services for Low-Latency Real-Time Applications
        </title>

        <author fullname="Stephen McQuistin" initials="S." surname="McQuistin">
            <organization>University of Glasgow</organization>
            <address>
                <postal>
                    <street>School of Computing Science</street>
                    <city>Glasgow</city>
                    <code>G12 8QQ</code>
                    <country>UK</country>
                </postal>
                <email>sm@smcquistin.uk</email>
            </address>
        </author>

        <author fullname="Colin Perkins" initials="C. S." surname="Perkins">
            <organization>University of Glasgow</organization>
            <address>
                <postal>
                    <street>School of Computing Science</street>
                    <city>Glasgow</city>
                    <code>G12 8QQ</code><country>UK</country>
                </postal>
                <email>csp@csperkins.org</email>
            </address>
        </author>

        <author fullname="Marwan Fayed" initials="M." surname="Fayed">
            <organization>University of Stirling</organization>
            <address>
                <postal>
                    <street>
                        Department of Computing Science &amp; Maths
                    </street>
                    <city>Stirling</city>
                    <code>FK9 4LA</code><country>UK</country>
                </postal>
                <email>mmf@cs.stir.ac.uk</email>
            </address>
        </author>

        <date year="2016" />

        <area>Transport</area>

        <workgroup>TAPS Working Group</workgroup>

        <abstract>
            <t>
                This document describes the set of transport services
                required by low-latency, real-time applications. These
                services are derived from the needs of the applications,
                rather than from the current capabilities of the transport
                layer. An example API, based on the Berkeley Sockets API,
                is also provided, alongside examples of how the target
                applications would use the API to access the transport
                services described.
            </t>
        </abstract>
    </front>

    <middle>
        <section anchor="intro" title="Introduction">
            <t>
                The goal of the TAPS working group is to break down the
                existing transport layer into a set of transport services,
                decoupling these from the transport protocols that provide
                them. As a result, the standardisation of transport
                services becomes feasible and important. The first phase of
                this process has been to inspect the existing transport
                protocols, and determine the services they provide. The
                next phase, enabled both by the use of transport services
                and their separation from transport protocols, is to define
                novel transport services based on the needs of
                applications. In essence, these services are derived from
                applications by thinking about what the transport layer
                would provide to applications if the constraints of the 
                existing transport protocols were not in place.
            </t>
            <t>
                This document considers the transport services required by
                low-latency applications. This is an important class of
                applications, not only because it represents a significant
                portion of Internet traffic, but because it is arguably
                poorly served by the existing transport layer: the
                available transport protocols bundle services together in
                such a way that no one protocol provides all the services
                required.
            </t>
            <t>
                After detailing the transport services required by these
                applications, a sample API that provides these services is
                outlined. This API is then used to demonstrate how
                applications might make use of the transport services
                described.
            </t>
            <t>
                This document does not consider how the transport services
                described map to the transport protocols that might provide
                them.
            </t>
        </section>

        <section anchor="services" title="Low-Latency Transport Services">
            <t>
                The decoupling of transport services from transport
                protocols allows for the development of novel transport
                services, based on the needs of applications. This section
                describes the transport services required by low-latency
                applications.
                <list style="hanging" hangIndent="6">
                    <t hangText="Timing">
                        <vspace />
                        Timing is the most essential characteristic of the
                        data generated by low-latency applications. Data
                        has a lifetime associated with it: a deadline, 
                        relative to the time the data was produced, by
                        which it must be delivered. Once this lifetime has
                        been exceeded, the data is no longer useful to the
                        receiving application. Data lifetimes depend
                        on the latency bounds of the application.
                        Interactive applications, such as telephony, video
                        conferencing, or telepresence, require a low
                        end-to-end latency, ranging from tens to a few
                        hundred milliseconds. Non-interactive applications
                        can accomodate higher latency, with bounds in the
                        order of seconds.
                        <vspace /><vspace />
                        There are a number of factors used in predicting if
                        data will arrive within its lifetime: the time
                        between being sent by the application and being
                        sent on the wire, the one-way network delay, and
                        the length of time the data will be buffered at the
                        receiver before being used (the play-out delay).
                        Multimedia applications, which comprise a
                        significant portion of the target application area,
                        have a play-out buffer to reduce the impact of
                        jitter. Estimates for both RTT and play-out delay
                        must be available to the sender.
                    </t>
                    <t hangText="Partial Reliability">
                        <vspace />
                        The combination of a lossy, best-effort network
                        (e.g., IP) layer and support for timing and
                        lifetimes results in the need for a partially
                        reliable service. Given the limitations of forward
                        error correct techniques, there is some probability
                        that packet loss can only be recovered from by
                        retransmitting the lost packet. This introduces
                        potentially unbounded delay, given that
                        retransmissions themselves may be lost. Therefore,
                        timing and fully reliable transport services cannot
                        be provided together -- the reliable delivery of 
                        data cannot be guaranteed within a given lifetime.
                        <vspace /><vspace />
                        This implies a partial reliability service, where
                        data is delivered reliably only while it is
                        likely to be useful to the receiving application.
                        Once a message has exceeded its lifetime,
                        attempts to transmit it will be abandoned.
                    </t>
                    <t hangText="Dependencies">
                        <vspace />
                        Partial reliability means that not all data that is
                        sent will be received successfully. This means that
                        a dependency management transport service is
                        required. Data must not be sent if it relies upon
                        earlier data that has not been successfully
                        delivered.
                    </t>
                    <t hangText="Messaging">
                        <vspace />
                        Given that not all data will arrive successfully,
                        it is important to maximise the utility of the
                        data that does arrive. Application-level framing
                        <xref target="CCR20" /> allows the
                        application to package data into units that are
                        useful (assuming delivery of their dependencies) to
                        the receiver. The combination of a messaging
                        service (to maintain application data unit
                        boundaries) and a dependency services provides
                        greater utility to applications than a
                        stream-oriented service on lossy networks.

                        To minimise latency, messages are delivered to the
                        application in the order they arrive. Reordering
                        messages into transmission order introduces latency
                        when applied across a lossy IP network; messages
                        may be buffered waiting for earlier messages to be
                        retransmitted. Application-layer protocols, such as
                        RTP, introduce sequencing, allowing applications to
                        reorder messages if required. Introducing order at
                        this layer makes the resultant latency explicit to
                        the application.
                    </t>
                    <t hangText="Multistreaming">
                        <vspace />
                        Messaging enables a multistreaming service. Many
                        applications are comprised of multiple streams,
                        each with their own characteristics with regards to
                        the other services listed. For example, a typical
                        multimedia application has at least two flows for
                        audio and video, each with different properties
                        (e.g., loss tolerance, message sizes). A
                        multistreaming service allows these streams to be
                        configured separately.
                    </t>
                    <t hangText="Multipath">
                        <vspace />
                        Multiple paths often exist between hosts; a
                        multipath service is required to allow applications
                        to benefit from this. This is an extension of the
                        multistreaming service: different streams should
                        be mapped to the most suitable path, given the
                        configuration of the stream, and the network
                        conditions of the path. Messaging is required to
                        make optimal use of multiple paths with different
                        loss and delay characteristics.
                    </t>
                    <t hangText="Congestion Control">
                        <vspace />
                        Congestion control is an essential service. A given
                        algorithm is not suitable for all traffic types,
                        and so one is not prescribed. The service should 
                        require the use of a suitable congestion control
                        algorithm, and enforce this using a circuit
                        breaker.
                    </t>
                    <t hangText="Connections (optional)">
                        <vspace />
                        Maintaining per-connection metadata at the
                        endpoints is helpful for the implementation of many 
                        congestion control algorithms. Further, connection
                        setup and teardown messages can also benefit
                        in-network services, including NAT traversal and
                        firewall pinhole management. As a result, it is
                        often desirable to have support for a
                        connection-oriented service.
                    </t>
                </list>
            </t>
            <t>
                This set of transport services demonstrates the need for
                a top-down approach. Timing is a crucial characteristic of
                low-latency applications, from which the other services
                follow.
            </t>
        </section>

        <section anchor="API" title="Abstract API">
            <t>
                This section describes an abstract API that supports the
                transport services described in <xref target="services" />.
                This allows the usage of these services to be demonstrated
                in <xref target="usage" />.
            </t>
            <t>
                It should be noted that the main contribution of this
                document is the set of transport services specified in
                <xref target="services" />. An abstract API is described
                here to illustrate how these services might be provided,
                based on Berkeley Sockets for familiarity. Other APIs, not
                constrained by the limitations of Berkeley Sockets, would
                be more appropriate.
            </t>
            <section anchor="SetupTeardown" title="Socket Setup &amp; Teardown">
                <t>
                    Hosts setup and tear-down sockets using the socket()
                    and close() functions, as in the standard Berkeley
                    sockets API.
                </t>
                <t>
                    The function signatures are:
                    <figure>
                        <artwork><![CDATA[
      int socket(int address_family,
                 int socket_type);

      int close(int sd);
]]></artwork>
                    </figure>
                    socket() returns a socket descriptor (sd) on success,
                    while close() returns 0 on success, and -1 on failure.
                </t>
            </section>
            <section anchor="Options" title="Socket Options">
                <t>
                    Socket options can be set and read using the
                    setsockopt() and getsockopt() functions respectively.
                    This mirrors the standard Berkeley sockets API.
                </t>
                <t>
                    The function signatures are:
                    <figure>
                        <artwork><![CDATA[
      int getsockopt(int sd,
                     int level,
                     int option,
                     void *value,
                     socklen_t *len);

      int setsockopt(int sd,
                     int level,
                     int option,
                     const void *value,
                     socklen_t len);
]]></artwork>
                    </figure>
                    Both return 0 on success, and -1 on failure.
                </t>
            </section>
            <section anchor="Connections" title="Connection Handling">
                <t>
                    The connection primitives are the same as those of
                    TCP sockets. Servers bind() to a particular address and
                    port, then listen() for and accept() incoming
                    connections. Clients connect() to a server.
                </t>
                <t>
                    The function signatures are:
                    <figure>
                        <artwork><![CDATA[
      int bind(int sd,
               struct sockaddr *addr,
               socklen_t addrlen);

      int listen(int sd);

      int accept(int sd,
                 struct sockaddr *addr,
                 socklen_t *addrlen);
  
      int connect(int sd,
                  const struct sockaddr *addr,
                  socklen_t addrlen);
]]></artwork>
                    </figure>
                    All return 0 on success, and -1 on failure.
                </t>
            </section>
            <section anchor="Timing" title="Timing">
                <t>
                    Once a connection has been establised, the receiver
                    then indicates its media play-out delay, in
                    milliseconds, via the set_po_delay() function. This
                    specifies how long the application will buffer
                    data for before it is rendered to the user. The
                    play-out delay is fed back to the sender, for use in
                    estimating message liveness.
                </t>
                <t>
                    The function signature is:
                    <figure>
                        <artwork><![CDATA[
      int set_po_delay(int delay);
]]></artwork>
                    </figure>
                    The function returns 0 on success, and -1 on failure.
                </t>
            </section>
            <section anchor="Messaging" title="Messaging">
                <t>
                    Message-oriented data transmission is exposed by the
                    send_message() and recv_message() functions. These
                    expose a partially reliable message delivery service
                    to the application, framing data such that either the
                    complete message is delivered, or lost in its entirety.
                </t>
                <t>
                    The function signatures are:
                    <figure>
                        <artwork><![CDATA[
      int send_message(int sd,
                       const void *buf,
                       size_t len,
                       uint16_t *seq_num,
                       int lifetime,
                       uint16_t depends_on,
                       uint8_t substream);

      int recv_message(int sd,
                       void *buf,
                       size_t len,
                       uint16_t *seq_num,
                       uint8_t *substream);
]]></artwork>
                    </figure>
                    send_message() returns the number of bytes sent and the
                    sequence number of the message, while
                    recv_message returns the sub-stream identifier and
                    length of the message, along with the received message
                    data. 
                </t>
                <t>
                    It is instructive to compare the partially reliable
                    send and receive functions to their Berkeley sockets
                    API counterparts. The send_message() call takes three
                    additional parameters, providing support for the 
                    transport services described in
                    <xref target="services" />:
                    <list style="symbols">
                        <t>
                            Lifetime: combined with an estimate of the
                            round-trip time, the time that the message
                            has spent in the sending buffer, and the
                            play-out delay, to estimate message liveness
                        </t>
                        <t>
                            Dependency message sequence number: used to
                            determine if this message depends on another
                            that was not sent successfully
                        </t>
                        <t>
                            Sub-stream identifier: to provide the
                            multistreaming service
                        </t>
                    </list>
                </t>
                <t>
                    send_message() returns the sequence number of the sent
                    message, allowing it to be used as the dependency of
                    future messages. The sequence number will increase by 1
                    for each message sent (and wrap around within the
                    16-bit field). recv_message() returns the sequence
                    number of the received message, allowing the
                    application to identify gaps in the sequence space
                    (indicating reordering or loss).
                </t>
                <t>
                    [Discussion question: would it be useful for
                    recv_message() to expose the message arrival time?]
                </t>
            </section>
            <section anchor="Utilities" title="Utilities">
                <t>
                    Two utility functions are needed to support the other
                    services. To allow applications to size messages
                    to increase their utility, get_pmtu() provides the
                    path MTU. get_rtt_est() provides an estimate of
                    the round-trip time, to enable applications to
                    calculate an appropriate play-out delay value.
                </t>
                <t>
                    The function signatures are:
                    <figure>
                        <artwork><![CDATA[
      int get_pmtu(int sd);

      int get_rtt_est(int sd);
]]></artwork>
                    </figure>
                    get_pmtu() returns the path MTU in bytes.
                    get_rtt_est() returns the current round-trip time
                    estimate in milliseconds.
                </t>
                <t>
                    Endpoints need to send data regularly to obtain an
                    accurate RTT estimate. Where an endpoint would not
                    otherwise transmit data, the messages sent by
                    set_po_delay() will allow an RTT estimate to be
                    calculated.
                </t>
            </section>
            <section anchor="Assumptions" title="Design Assumptions">
                <t>
                    The API specified here makes a number of assumptions
                    about how the services described in
                    <xref target="services" /> should be provided. For
                    example, the way in which sequence numbers are
                    implemented limits messages to expressing their
                    dependence on messages that have been sent previously.
                    A different API may be implement a different set of
                    constraints on the dependency management service.
                </t>
                <t>
                    [Discussion questions: does this mean that the services
                    aren't properly defined? How much flexibility should
                    be given when designing an API?]
                </t>
            </section>
        </section>

        <section anchor="usage" title="Example Usage">
            <t>
                In this section, examples of how applications might use the
                API described in <xref target="API" /> are given. This is
                important, not only for demonstrating the usability of the
                API, but for validating the selection of transport services
                described.
            </t>
            <section anchor="HTTP1" title="HTTP/1.1">
                <t>
                    tbd
                </t>
                <t>
                    [Not typically described as "low latency", but is used
                    by many applications that would benefit from lower
                    latency. Mapping to a message-oriented transport
                    service is not obvious.]
                </t>
            </section>
            <section anchor="HTTP2" title="HTTP/2">
                <t>
                    tbd
                </t>
                <t>
                    [Mapping to message-oriented transport is a lot more
                    obvious.]
                </t>
            </section>
            <section anchor="RTP" title="Real-Time Multimedia">
                <t>
                    Real-time multimedia applications typically make use of
                    RTP <xref target="RFC3550" /> as their
                    application-layer protocol. This adds a header to each
                    message, with timing and sequencing metadata. RTP is
                    compatible with the partially reliable, unordered
                    message delivery model described, making its mapping to
                    the API straightforward.
                </t>
                <t>
                    Sender:
                    <list style="symbols">
                        <t>
                            The sender opens a socket(), and bind()s to
                            a particular address and port. It then
                            listen()s for and accept()s incoming
                            connections.
                        </t>
                        <t>
                            Messages are sent using send_message().
                            The application specifies the lifetime of
                            the message; this is the maximum delay
                            each message can tolerate. For example, a
                            VOIP application would set this to 150ms.
                            The sequence number of message this message
                            depends on is set, and the sub-stream
                            specified. get_pmtu() can be used to help
                            determine the message sizes.
                        </t>
                        <t>
                            At the end of the connection, the sender
                            close()s the socket.
                        </t>
                    </list>
                </t>
                <t>
                    Receiver:
                    <list style="symbols">
                        <t>
                            The receiver opens a socket(), and
                            connect()s to a server.
                        </t>
                        <t>
                            Once the connection has been established,
                            the receiver sets its play-out delay, in
                            milliseconds, using set_po_delay(). The
                            utility function get_rtt_est() can be
                            used in calculating this value. The
                            play-out delay can be changed over time.
                        </t>
                        <t>
                            Messages are received using recv_message().
                            The application receives the sequence
                            number and sub-stream identifier alongside
                            the message data.
                        </t>
                        <t>
                            At the end of the connection, the receiver
                            close()s the socket.
                        </t>
                    </list>
                </t>
            </section>
        </section>

        <section anchor="IANA" title="IANA Considerations">
            <t>This memo includes no request to IANA.</t>
        </section>

        <section anchor="Security" title="Security Considerations">
            <t>
                The transport services described do not themselves
                introduce any security considerations beyond those of TCP
                or UDP. No additional metadata needs to be exposed on the
                wire to provide the transport services described. The
                transport services result in a partially reliable,
                message-oriented delivery model. As a result, Datagram TLS
                <xref target="RFC6347" /> is required for security and
                encryption.
            </t>
            <t>
                [Discussion question: should DTLS/security be listed as an
                essential service?]
            </t>
            <t>
                There are a number of options for deploying the transport
                services described in this document. They could be deployed
                within a new protocol, but this will likely limit
                deployability. Alternatively, for greater deployability,
                existing protocols could be modified. Partially Reliable
                SCTP <xref target="RFC3758" /> and WebRTC's data channels
                <xref target="I-D.ietf-rtcweb-data-channel" /> provide a
                similar set of services over SCTP. For maximum
                deployability, the services should be provided over TCP.
                Modifying TCP's in-order byte stream abstraction to
                provide an out-of-order message-oriented delivery model
                is challenging. The designs of TCP Hollywood
                <xref target="IFIP2016" />, Minion
                <xref target="I-D.iyengar-minion-protocol" />, and QUIC
                <xref target="I-D.hamilton-quic-transport-protocol" />
                show ways of addressing these challenges.
            </t>
        </section>
    </middle>
    <back>
        <references title="Informative References">
            <reference anchor="CCR20" target="http://dx.doi.org/10.1145/99508.99553">
                <front>
                    <title>
                        Architectural Considerations for a New Generation
                        of Protocols
                    </title>
                    <author initials="D. D." surname="Clark" />
                    <author initials="D. L." surname="Tennenhouse" />
                    <date month="September" year="1990" />
                </front>
                <seriesInfo name="ACM SIGCOMM Computer Communications Review" 
                            value="20 (4) 200-208" />
                <seriesInfo name="DOI" value="10.1145/99508.99553" />
            </reference>
            <reference anchor="IFIP2016" target="http://dx.doi.org/10.1109/IFIPNetworking.2016.7497221">
                <front>
                    <title>
                        TCP Hollywood: An Unordered, Time-Lined, TCP for
                        Networked Multimedia Applications
                    </title>
                    <author initials="S." surname="McQuistin" />
                    <author initials="C." surname="Perkins" />
                    <author initials="M." surname="Fayed" />
                    <date month="May" year="2016" />
                </front>
                <seriesInfo name="IFIP Networking" 
                            value="2016" />
                <seriesInfo name="DOI" value="10.1109/IFIPNetworking.2016.7497221" />
            </reference>
            <?rfc include="reference.RFC.6347"?>
            <?rfc include="reference.RFC.3758"?>
            <?rfc include="reference.I-D.ietf-rtcweb-data-channel"?>
            <?rfc include="reference.I-D.hamilton-quic-transport-protocol"?>
            <?rfc include="reference.I-D.iyengar-minion-protocol"?>
            <?rfc include="reference.RFC.3550"?>
       </references>
    </back>
</rfc>