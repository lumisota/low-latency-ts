<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="3"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<rfc category="info" docName="draft-mcquistin-low-latency-transport-services-00" ipr="trust200902">
    <front>
        <title abbrev="Transport Services API">
            Transport Services for Low-Latency Real-Time Applications
        </title>

        <author fullname="Stephen McQuistin" initials="S." surname="McQuistin">
            <organization>University of Glasgow</organization>
            <address>
                <postal>
                    <street>School of Computing Science</street>
                    <city>Glasgow</city>
                    <code>G12 8QQ</code>
                    <country>UK</country>
                </postal>
                <email>sm@smcquistin.uk</email>
            </address>
        </author>

        <author fullname="Colin Perkins" initials="C. S." surname="Perkins">
            <organization>University of Glasgow</organization>
            <address>
                <postal>
                    <street>School of Computing Science</street>
                    <city>Glasgow</city>
                    <code>G12 8QQ</code><country>UK</country>
                </postal>
                <email>csp@csperkins.org</email>
            </address>
        </author>

        <date year="2016" />

        <area>Transport</area>

        <workgroup>TAPS Working Group</workgroup>

        <abstract>
            <t>
                This document describes the set of transport services
                required by low-latency applications. These services are
                derived from the needs of the application, rather than from
                the current capabilities of the transport layer. An example
                API, based on the BSD Sockets API, is also given.
            </t>
        </abstract>
    </front>

    <middle>
        <section anchor="intro" title="Introduction">
            <t>
                The goal of the TAPS working group is to break down the
                existing transport layer into a set of transport services,
                decoupling these from the transport protocols that provide
                them. As a result, the standardisation of transport
                services becomes feasible and important. The first phase of
                this has been to inspect the existing transport protocols,
                and determine the services they provide. The next phase,
                enabled both by the use of transport services and their
                separation from transport protocols, is to define novel
                transport services based on the needs of applications.
                In essence, these services are derived from applications by
                thinking about what the transport layer would provide to
                applications if the constraints of the existing transport
                protocols were not in place.
            </t>
            <t>
                This document considers the transport services required by
                low-latency applications. This is an important class of
                applications, not only because it represents a significant
                portion of Internet traffic, but because it is arguably
                poorly served by the existing transport layer: the
                available transport protocols bundle together transport
                services in such a way that no one protocol is ideal.
            </t>
            <t>
                After detailing the transport services required by these
                applications, a sample API that provides these services is
                outlined. This API is then used to demonstrate how
                applications might make use of the transport services
                described.
            </t>
            <t>
                This document does not consider how the transport services
                described map to the transport protocols that might provide
                them.
            </t>
        </section>

        <section anchor="services" title="Low-Latency Transport Services">
            <t>
                The decoupling of transport services and transport
                protocols allows for the development of novel transport
                services, based on the needs of applications. This section
                describes the transport services required by low-latency
                applications.
                <list style="hanging" hangIndent="6">
                    <t hangText="Timing">
                        <vspace />
                        Timing is the most essential characteristic of the
                        data generated by low-latency applications. Data
                        has a lifetime associated with it: the time after
                        the data has been produced that it remains useful
                        to the receiving application. This lifetime depends
                        on the latency bounds of the application.
                        Interactive applications, such as telephony, video
                        conferencing, or telepresence, require a low
                        end-to-end latency, ranging from tens to a few
                        hundred milliseconds. Non-interactive applications
                        can accomodate higher latency, with bounds in the
                        order of seconds.
                    </t>
                    <t hangText="Partial Reliability">
                        <vspace />
                        The combination of a lossy, best-effort network
                        (e.g., IP) layer and support for timing and
                        lifetimes results in the need for a partially
                        reliable service. Given the limitations of forward
                        error correct techniques, there is some probability
                        that packet loss can only be recovered from by
                        retransmitting the lost packet. This introduces
                        potentially unbounded delay, given that
                        retransmissions themselves may be lost. Therefore,
                        timing and fully reliable transport services cannot
                        be provided together -- the reliable delivery of 
                        data cannot be guaranteed within a given lifetime.
                        <vspace /><vspace />
                        This implies a partial reliability service, where
                        data is delivered reliably while it is still likely
                        to be useful to the receiving application.
                        Retransmissions are not sent for data whose
                        lifetime has expired.
                    </t>
                    <t hangText="Dependencies">
                        <vspace />
                        Partial reliability means that not all data that is
                        sent will be received successfully. This means that
                        a dependency management transport service is
                        required. Data must not be sent if it relies upon
                        earlier data that has not been successfully
                        delivered.
                    </t>
                    <t hangText="Messaging">
                        <vspace />
                        The combination of partial reliability and packet
                        loss means that application-level framing is
                        required to maximise the utility of each received
                        packet. This implies a message-oriented service to
                        maintain application data unit boundaries.
                        <vspace /><vspace />
                        To minimise latency, messages are delivered to the
                        application in the order they arrive. Reordering
                        messages into transmission order introduces latency
                        when applied across a lossy IP network; messages
                        may be buffered waiting for earlier packets to
                        be retransmitted. Application-layer protocols, such
                        as RTP, introduce sequencing, allowing applications
                        to introduce order if required. Introducing order
                        at this layer makes the resultant latency explicit.
                    </t>
                    <t hangText="Multistreaming">
                        <vspace />
                        Messaging enables a multistreaming service. Many
                        applications are comprised of multiple streams,
                        each with their own characteristics with regards to
                        the other services listed. A multistreaming service
                        would allow these streams to be configured
                        separately.
                    </t>
                    <t hangText="Multipath">
                        <vspace />
                        Multiple paths often exist between hosts; a
                        multipath service is required to allow applications
                        to benefit from this. This is an extension of the
                        multistreaming service: different streams should
                        be mapped to the most suitable path, given the
                        configuration of the stream, and the network
                        conditions of the path. Messaging is required to
                        make optimal use of multiple paths with different
                        characteristics.
                    </t>
                    <t hangText="Congestion Control">
                        <vspace />
                        Congestion control is an essential service. A given
                        algorithm is not suitable for all traffic types,
                        and so one is not prescribed. The service should 
                        require the use of a suitable congestion control
                        algorithm, and enforce this using a circuit
                        breaker.
                    </t>
                    <t hangText="Connections (optional)">
                        <vspace />
                        Maintaining per-connection at the endpoints is
                        helpful for the implementation of many forms of
                        congestion control. Further, connection setup
                        and teardown messages can also benefit in-network
                        services, including NAT traversal and firewall
                        pinhole management. As a result, it is often
                        desirable to support a connection-oriented service.
                    </t>
                </list>
            </t>
            <t>
                This set of transport services demonstrates the need for
                a top-down approach. Timing is a crucial characteristic of
                low-latency applications, from which the other services
                follow.
            </t>
        </section>

        <section anchor="API" title="Abstract API">
            <t>
                This section describes an abstract API that supports the
                transport services described in <xref target="services" />.
                This allows the usage of these services to be demonstrated
                in <xref target="usage" />.
            </t>
            <t>
                It should be noted that the main contribution of this
                document is the set of transport services specified in
                <xref target="services" />. An abstract API is described
                here to illustrate how these services might be provided,
                but APIs (i.e., not based on Berkeley Sockets) could be
                used.
            </t>
            <section anchor="SetupTeardown" title="Socket Setup &amp; Teardown">
                <t>
                    Hosts setup and tear-down sockets using the socket()
                    and close() functions, as in the standard Berkeley
                    sockets API.
                </t>
                <t>
                    The function signatures are:
                    <figure>
                        <artwork><![CDATA[
      int socket(int address_family,
                 int socket_type);

      int close(int sd);
]]></artwork>
                    </figure>
                    socket() returns a socket descriptor (sd) on success,
                    while close() returns 0 on success, and -1 on failure.
                </t>
            </section>
            <section anchor="Options" title="Socket Options">
                <t>
                    Socket options can be set and read using the
                    setsockopt() and getsockopt() functions respectively.
                    This mirrors the standard Berkeley sockets API.
                </t>
                <t>
                    The function signatures are:
                    <figure>
                        <artwork><![CDATA[
      int getsockopt(int sd,
                     int level,
                     int option,
                     void *value,
                     socklen_t *len);

      int setsockopt(int sd,
                     int level,
                     int option,
                     const void *value,
                     socklen_t len);
]]></artwork>
                    </figure>
                    Both return 0 on success, and -1 on failure.
                </t>
            </section>
            <section anchor="Connections" title="Connection Handling">
                <t>
                    The connection primitives are the same as those of
                    TCP sockets. Servers bind() to a particular address and
                    port, then listen() for and accept() incoming
                    connections. Clients connect() to a server.
                </t>
                <t>
                    The function signatures are:
                    <figure>
                        <artwork><![CDATA[
      int bind(int sd,
               struct sockaddr *addr,
               socklen_t addrlen);

      int listen(int sd);

      int accept(int sd,
                 struct sockaddr *addr,
                 socklen_t *addrlen);
]]></artwork>
</figure>
<figure>
<artwork><![CDATA[  
      int connect(int sd,
                  const struct sockaddr *addr,
                  socklen_t addrlen);
]]></artwork>
                    </figure>
                    All return 0 on success, and -1 on failure.
                </t>
            </section>
            <section anchor="Timing" title="Timing">
                <t>
                    Once a connection has been establised, the receiver
                    then indicates its media play-out delay, in
                    milliseconds, via the set_po_delay() function. This
                    specifies how long the application will buffer
                    data for before it is rendered to the user. The
                    play-out delay is fed back to the sender, for use in
                    estimating message liveness.
                </t>
                <t>
                    The function signature is:
                    <figure>
                        <artwork><![CDATA[
      int set_po_delay(int delay);
]]></artwork>
                    </figure>
                    The function returns 0 on success, and -1 on failure.
                </t>
            </section>
            <section anchor="Messaging" title="Messaging">
                <t>
                    Message-oriented data transmission is exposed by the
                    send_message() and recv_message() functions. These
                    expose a partially reliable message delivery service
                    to the application, framing data such that either the
                    complete message is delivered, or lost in its entirety.
                </t>
                <t>
                    The function signatures are:
                    <figure>
                        <artwork><![CDATA[
      int send_message(int sd,
                       const void *buf,
                       size_t len,
                       uint16_t seq_num,
                       int lifetime,
                       uint16_t depends_on,
                       uint8_t substream);

      int recv_message(int sd,
                       void *buf,
                       size_t len,
                       uint8_t *substream);
]]></artwork>
                    </figure>
                    send_message() returns the number of bytes sent, while
                    recv_message returns the sub-stream identifier and
                    length of the message, along with the received message
                    data. 
                </t>
                <t>
                    It is instructive to compare the partially reliable
                    send and receive functions to their Berkeley sockets
                    API counterparts. The send_message() call takes four
                    additional parameters, providing support for the 
                    transport services described in
                    <xref target="services" />:
                    <list style="symbols">
                        <t>
                            Message sequence number: for use by the
                            dependency management service
                        </t>
                        <t>
                            Lifetime: combined with an estimate of the
                            round-trip time, the time that the message
                            has spent in the sending buffer, and the
                            play-out delay, to estimate message liveness
                        </t>
                        <t>
                            Dependency message sequence number: used to
                            determine if this message depends on another
                            that was not sent successfully
                        </t>
                        <t>
                            Sub-stream identifier: to provide the
                            multistreaming service
                        </t>
                    </list>
                </t>
            </section>
        </section>

        <section anchor="usage" title="Example Usage">
            <t>
                How would typical applications use this API?
            </t>
            <t>
                Want to show that while the list of transport services
                (and the API that follows) are focused on eliminating
                latency (or at least exposing it and making it optional),
                that latency-tolerant applications can use these primitives
                to get the delivery model they need.
            </t>
            <section anchor="HTTP1" title="HTTP/1.1">
                <t>
                    tbd
                </t>
            </section>
            <section anchor="HTTP2" title="HTTP/2">
                <t>
                    tbd
                </t>
            </section>
            <section anchor="RTP" title="Low-Latency Multimedia">
                <t>
                    RTP 
                </t>
            </section>
        </section>

        <section anchor="IANA" title="IANA Considerations">
            <t>This memo includes no request to IANA.</t>
        </section>

        <section anchor="Security" title="Security Considerations">
            <t></t>
        </section>
    </middle>

    <back>
    </back>
</rfc>